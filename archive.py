import glob
import json
import os
import subprocess

config = {}
data = {}

# load the config file
with open("config.json", "r") as config_file:
    config = json.load(config_file)

# load from existing data file
if os.path.exists(config["data_file"]):
    with open(config["data_file"], "r") as file:
        data = json.load(file)

# handle each pattern
for pattern in config["patterns"]:
    results = glob.glob(pattern)

    # handle all the results generated by the pattern
    for result in results:
        m_time = os.path.getmtime(result)  # get the last modified time
        
        # if the result is not yet tracked or has changed since last entry, update the archive
        if result not in data or (result in data and data[result] < m_time):
            data[result] = m_time
            subprocess.call("7z a {}.zip {}".format(os.path.normpath(config["archive_directory"] + "/" + result), result))

# write back the data file
with open(config["data_file"], "w") as file:
    json.dump(data, file)