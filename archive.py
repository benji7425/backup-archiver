import glob
import json
import logging
import os
from subprocess import Popen, PIPE

config = {}
data = {}

dir = os.path.dirname(os.path.realpath(__file__))
logging.basicConfig(
    filename=os.path.join(dir, "log"),
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)-8s %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S")

# load the config file
with open("config.json", "r") as config_file:
    config = json.load(config_file)

# load from existing data file
if os.path.exists(config["data_file"]):
    with open(config["data_file"], "r") as file:
        data = json.load(file)

# handle each pattern
for pattern in config["patterns"]:
    logging.debug("Checking pattern {}".format(pattern))

    results = glob.glob(pattern)

    # handle all the results generated by the pattern
    for result in results:
        logging.debug("Checking result {} for pattern {}".format(result, pattern))

        m_time = os.path.getmtime(result)  # get the last modified time
        
        # if the result is not yet tracked or has changed since last entry, update the archive
        if result not in data or (result in data and data[result] < m_time):
            logging.debug("Updating result {} for pattern {}".format(result, pattern))
            
            data[result] = m_time

            # archive with 7zip
            process = Popen("7z a {}.zip {}".format(os.path.normpath(config["archive_directory"] + "/" + result), result), stdin=PIPE, stdout=PIPE)

            out, err = process.communicate()
            logging.debug(out)
            if err is not None:
                logging.warning(err)
            

# write back the data file
with open(config["data_file"], "w") as file:
    json.dump(data, file)